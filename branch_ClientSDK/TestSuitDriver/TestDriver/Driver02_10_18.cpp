/********************************************************************
* Name      :  Driver02_10_18.cpp                                  
* Param     :                                                        
* Return    :                                                        
* Describ   :                                                        
* Author    :  Zhang Botong                                          
* Date      :  2018-07-02                                                 
********************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include "DetectFaceIF.h"
#include "Driver02_10_18.h"

Driver02_10_18::Driver02_10_18(unsigned int nCaseId ): Driver( nCaseId )
{

}

int Driver02_10_18::init()
{
	Driver::init();
}

int Driver02_10_18::run()
{
	LXTestWBS_02_10_18();
	
	return 0;
}

int Driver02_10_18::uninit()
{
	Driver::uninit();
}

Driver02_10_18::~Driver02_10_18()
{
	
}


void Driver02_10_18::LXTestWBS_02_10_18()
{

	printf("---start---------------------------------------------test----WBS_02_10_18-------------------------\n");
	UINT8 data[570]={
		0x84,0x11,0x40,0x02,0x18,0x18,0x18,0x18,0x21,0x7b,0x03,0x6d,0x01,0xcb,0x03,0xc6,0x01,0x33,0x04,0x00,0x00,
		0x00,0x3c,0x00,0x3c,0x9b,0x1d,0x03,0x61,0x01,0x6c,0x03,0xbb,0x01,0x34,0x04,0x00,0x00,0x00,0x37,0x00,0x37,
		0x99,0x29,0x03,0xee,0x00,0x73,0x03,0x48,0x01,0x35,0x04,0x00,0x00,0x00,0x27,0x00,0x27,0x88,0x84,0x03,0xf4,
		0x00,0xcf,0x03,0x4c,0x01,0x36,0x04,0x00,0x00,0x00,0x32,0x00,0x32,0x93,0x36,0x03,0x7c,0x00,0x7e,0x03,0xd1,
		0x00,0x37,0x04,0x00,0x00,0x00,0x3f,0x00,0x3f,0xa1,0xdc,0x03,0x74,0x01,0x28,0x04,0xcc,0x01,0x38,0x04,0x00,
		0x00,0x00,0x05,0x00,0x00,0x61,0xdb,0x00,0x62,0x01,0xbf,0x01,0x5a,0x02,0x53,0x04,0x00,0x00,0x01,0x2e,0x00,
		0x00,0x5d,0x42,0x03,0x13,0x00,0x8a,0x03,0x62,0x00,0x39,0x04,0x00,0x00,0x00,0x35,0x00,0x35,0x97,0x4d,0x04,
		0x31,0x00,0x90,0x04,0x7d,0x00,0x3a,0x04,0x00,0x00,0x00,0x27,0x00,0x27,0x89,0x93,0x03,0x87,0x00,0xd8,0x03,
		0xd7,0x00,0x3b,0x04,0x00,0x00,0x00,0x29,0x00,0x29,0x8b,0x3d,0x05,0x99,0x01,0x80,0x05,0xe4,0x01,0x3c,0x04,
		0x00,0x00,0x00,0x0b,0x00,0x0b,0x6d,0x47,0x04,0x9a,0x00,0x8c,0x04,0xe9,0x00,0x3d,0x04,0x00,0x00,0x00,0x3f,
		0x00,0x3f,0xa1,0x9c,0x04,0xa5,0x00,0xe4,0x04,0xf6,0x00,0x3e,0x04,0x00,0x00,0x00,0x32,0x00,0x32,0x94,0x96,
		0x04,0x11,0x01,0xe1,0x04,0x65,0x01,0x3f,0x04,0x00,0x00,0x00,0x2c,0x00,0x2c,0x8e,0xeb,0x04,0x8e,0x01,0x2f,
		0x05,0xe2,0x01,0x40,0x04,0x00,0x00,0x00,0x06,0x00,0x00,0x62,0xa6,0x04,0x40,0x00,0xe8,0x04,0x8a,0x00,0x41,
		0x04,0x00,0x00,0x00,0x37,0x00,0x37,0x99,0xee,0x04,0x20,0x01,0x36,0x05,0x71,0x01,0x42,0x04,0x00,0x00,0x00,
		0x32,0x00,0x32,0x93,0x3f,0x04,0x08,0x01,0x87,0x04,0x5d,0x01,0x43,0x04,0x00,0x00,0x00,0x35,0x00,0x35,0x96,
		0xf4,0x03,0x25,0x00,0x3c,0x04,0x75,0x00,0x44,0x04,0x00,0x00,0x00,0x29,0x00,0x29,0x8b,0xf5,0x04,0x4d,0x00,
		0x39,0x05,0x9b,0x00,0x45,0x04,0x00,0x00,0x00,0x2e,0x00,0x2e,0x90,0x42,0x05,0x2c,0x01,0x82,0x05,0x76,0x01,
		0x46,0x04,0x00,0x00,0x00,0x1b,0x00,0x1b,0x7c,0x49,0x05,0x5c,0x00,0x88,0x05,0xa1,0x00,0x47,0x04,0x00,0x00,
		0x00,0x24,0x00,0x24,0x86,0x91,0x05,0x6c,0x00,0xd0,0x05,0xb1,0x00,0x48,0x04,0x00,0x00,0x00,0x1e,0x00,0x1e,
		0x80,0x8f,0x05,0x30,0x01,0xd1,0x05,0x80,0x01,0x49,0x04,0x00,0x00,0x00,0x29,0x00,0x29,0x8a,0x9c,0x03,0x19,
		0x00,0xe6,0x03,0x6d,0x00,0x4a,0x04,0x00,0x00,0x00,0x1e,0x00,0x1e,0x80,0xe8,0x03,0x8f,0x00,0x37,0x04,0xe4,
		0x00,0x4b,0x04,0x00,0x00,0x00,0x2e,0x00,0x2e,0x8f,0xf2,0x04,0xb6,0x00,0x35,0x05,0x03,0x01,0x4c,0x04,0x00,
		0x00,0x00,0x29,0x00,0x29,0x8a,0x46,0x05,0xc0,0x00,0x87,0x05,0x0a,0x01,0x4d,0x04,0x00,0x00,0x00,0x1d,0x00,
		0x1d,0x7d,0xe2,0x03,0x01,0x01,0x2f,0x04,0x57,0x01,0x4e,0x04,0x00,0x00,0x00,0x41,0x00,0x41,0xa2,0x8d,0x05,
		0x9f,0x01,0xd0,0x05,0xec,0x01,0x4f,0x04,0x00,0x00,0x00,0x27,0x00,0x27,0x87,0x91,0x05,0xcd,0x00,0xd0,0x05,
		0x18,0x01,0x50,0x04,0x00,0x00,0x00,0x1e,0x00,0x1e,0x7e,0x37,0x04,0x79,0x01,0x82,0x04,0xce,0x01,0x51,0x04,
		0x00,0x00,0x00,0x3c,0x00,0x3c,0x9d,0x92,0x04,0x88,0x01,0xda,0x04,0xde,0x01,0x52,0x04,0x00,0x00,0x00,0x2c,
		0x00,0x2c,0x8c
	};
	printf("\n[LX] processMsg start\n");
	processMsg(data,513);
	printf("\n[LX] processMsg end\n");

	printf("---end---------------------------------------------test----WBS_02_10_18-------------------------\n");
		
}
 
#define UART_COMMAND_LEN			(2)
#define UART_FACE_COORDINATE_COMMAND				(0x1184)
#define UART_FACE_COORDINATE_REC_BIT				(0x80)
#define MAX_SEND_LEN 	(40)

int Driver02_10_18::processMsg(UINT8 *pMsg, int nLen )
{
	if( (pMsg == 0) || (nLen == 0) )
	{
		return -1;
	}
	UINT8 *p = pMsg;
	UINT16	commandCode;
	UINT8 flags;
	UINT8  sequenceNumber;
	UINT32 frameNumber;
	UINT8 detectedObjects;
	UINT16 left,top,right,bottom;
	UINT32 trackID;
	UINT8 type,quality,blur,light,confidence;
	int dataLen = 0;
		
	commandCode = readInt16((const char*)p);//Command Code
	p = p + UART_COMMAND_LEN;
	flags = *p++;	//Flags
	sequenceNumber = *p++; //Sequence Number
	
	
	frameNumber = (UINT32)readInt32((const char*)p);
	p = p+4;
	printf("[LX] frameNuber = %u\n",frameNumber);
	detectedObjects = *p++;
	printf("[LX] detec frameNumber = %u\n",detectedObjects);
	//malloc
	dataLen = sizeof(RWFaceInfo)*detectedObjects;
	RWFaceInfo * mRWFaceInfo = (RWFaceInfo *)malloc(dataLen);
	int i =0 ;
	for( i = 0; i < detectedObjects; i++)
	{
		left = (UINT16)readInt16((const char*)p);
		p = p+2;
		top =  (UINT16)readInt16((const char*)p);
		p = p+2;
		right = (UINT16)readInt16((const char*)p);
		p = p+2;
		bottom =  (UINT16)readInt16((const char*)p);
		p = p+2;
		printf("[ lx ] i = %d; left = %u,top = %u,right = %u,bottom = %u \n",i ,left,top,right,bottom);
	
		trackID =  (UINT32)readInt32((const char*)p);
		p = p+4;
	
		type = *p++;
		quality= *p++;
		blur= *p++;
		light= *p++;
		confidence= *p++;
		printf("[LX ] tarckID = %u;type = %u,quality =%u, blur= %u, light = %u, confidence = %u \n", trackID,type,quality,blur,light,confidence);
		/*
		  typedef void (*CallbackNotifyFunc)( RWNotifyType *pNotifyType, UINT8 *pExtData, UINT32 *pDataLen );	
		  CallbackReplyFunc RegisterReplyFunc; //�ڷ���˷�����¼�Ľ��ʱ���� 
		  CallbackReplyFunc CancelRelpyFunc; //�ڷ���˷���ע���Ľ��ʱ����
		  CallbackNotifyFunc NotifyFaceFunc;//�ڷ����֪ͨͼ����Ϣʱ����	
		  CallbackNotifyFunc NotifyClientFunc;//�ڷ����֪ͨ�ͻ���״̬ʱ����
				
		*/
		/*
		//6)���ο���Ϣ�ӿ�		
		typedef struct _strRWFaceInfo 
		{ 
		UINT64 ImgID; //������ͼƬID
		UINT64 TrackNo; //���ٺ�
		UINT32 RectX; // ���������Ͻǵĺ�����
		UINT32 RectY; //���������Ͻǵ�������
		UINT32 RectWidth; // ������Ŀ�
		UINT32 RectHeight; // ������ĸ�
		UINT8 RectType; //���������ͣ�0������ͼ, 1��ͷ���, 2�������տ�,3��ȫ���տ�, 4��������
		UINT8 Align[3]; // ����,����,�ݲ�ʹ��
		float QScore;//ͼƬ������
		}RWFaceInfo;
		*/
	
		//init
		RWFaceInfo *tempRWFaceInfo = mRWFaceInfo + sizeof(mRWFaceInfo) * i;
		tempRWFaceInfo->ImgID = i;
		tempRWFaceInfo->TrackNo = trackID;
		tempRWFaceInfo->RectX = left;
		tempRWFaceInfo->RectY = top;
		tempRWFaceInfo->RectWidth = right - left;
		tempRWFaceInfo->RectHeight = bottom -top;
		tempRWFaceInfo->RectType = type;
		tempRWFaceInfo->QScore = quality;
			
			
	}

		
		
	if( (commandCode == UART_FACE_COORDINATE_COMMAND)  && (flags == UART_FACE_COORDINATE_REC_BIT) && (sequenceNumber == 0) )
	{
		/*		RWNotifyType pNotifyType = NotifyImgInfo;
				UINT8 *pExtData = (UINT8 *)mRWFaceInfo;
				UINT32 pDataLen = dataLen;
				CallbackNotifyFunc	pfun = ProcessReq::getInstance()->getNotifyFaceInfoFun();
				(*pfun)( &pNotifyType, pExtData, &pDataLen);	
		*/
		
		printf("ok");
		return 0;
	}
		
	//
	return 0;
}
unsigned short int Driver02_10_18::readInt16(const char* data)
{
	unsigned int low = data[0];
	unsigned int high = data[1];
	return ((high << 8) | low);
}
	
int Driver02_10_18::readInt32(const char* data)
{
	unsigned int lowLow = data[0];
	unsigned int lowHigh = data[1];
	unsigned int highLow = data[2];
	unsigned int highHigh = data[3];
	return ((highHigh<<24)|(highLow<<16)|(lowHigh<<8)|lowLow);
}
	
void Driver02_10_18::writeInt16(char* data, short int value)
{
	data[0] = (char)(value & 0xff);
	data[1] =  (char)((value >> 8) & 0xff);
}
	
void Driver02_10_18::writeInt32(char* data, int value)
{
	data[0] =  (char)(value & 0xff);
	data[1] =  (char)((value >> 8) & 0xff);
	data[2] =  (char)((value >> 16) & 0xff);
	data[3] =  (char)((value >> 24) & 0xff);
	
}
